This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
index.html
partb.html
partc.html
partd.html
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>4-Step Transportation Planning Model</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js for visualizations -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* A light gray background */
        }
        .step-card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: all 0.3s ease-in-out;
        }
        .step-card h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #111827;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e5e7eb;
        }
        .step-card h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #374151;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            text-align: center;
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
        }
        th {
            background-color: #f9fafb;
            font-weight: 600;
            color: #4b5563;
        }
        input[type="number"] {
            width: 100%;
            padding: 0.5rem;
            border-radius: 0.375rem;
            border: 1px solid #d1d5db;
            text-align: center;
            -moz-appearance: textfield;
        }
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        .btn:disabled {
            background-color: #d1d5db;
            color: #6b7280;
            cursor: not-allowed;
        }
        .btn-primary { background-color: #4f46e5; color: white; }
        .btn-primary:hover { background-color: #4338ca; }
        .btn-secondary { background-color: #e5e7eb; color: #374151; }
        .btn-secondary:hover { background-color: #d1d5db; }
        .btn-danger { background-color: #ef4444; color: white; }
        .btn-danger:hover { background-color: #dc2626; }
        
        /* Tab Styles */
        .tab-button {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 1.125rem;
            font-weight: 600;
            color: #6b7280;
            border-bottom: 3px solid transparent;
            text-decoration: none;
        }
        .tab-button.active {
            color: #4f46e5;
            border-bottom-color: #4f46e5;
        }
        .tab-button.disabled {
            color: #9ca3af;
            cursor: not-allowed;
        }
        
        /* Collapsible Section Styles */
        details summary {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1f2937;
            cursor: pointer;
            padding: 1rem;
            background-color: #f9fafb;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            list-style: none;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        details summary::-webkit-details-marker { display: none; }
        details summary::after {
            content: 'â–¶';
            transition: transform 0.2s;
        }
        details[open] summary::after {
            transform: rotate(90deg);
        }
        details[open] .collapsible-content {
            border-left: 3px solid #4f46e5;
            padding-left: 1.5rem;
            margin-top: 1rem;
        }

    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800">The 4-Step Transportation Planning Model</h1>
            <p class="text-lg text-gray-600 mt-2">An interactive tool for understanding travel demand forecasting.</p>
        </header>

        <!-- Tab Navigation -->
        <div class="border-b border-gray-200 mb-6">
            <nav class="flex flex-wrap -mb-px justify-center bg-white rounded-t-lg p-2 shadow-sm">
                <a href="index.html" class="tab-button active">Part A: Trip Generation</a>
                <a href="partB.html" class="tab-button">Part B: Trip Distribution</a>
                <a href="partC.html" class="tab-button">Part C: Mode Choice</a>
                <a href="partD.html" class="tab-button">Part D: Trip Assignment</a>
            </nav>
        </div>

        <!-- Tab Content -->
        <div id="partA">
            
            <!-- Collapsible Section 1: Model Building -->
            <details>
                <summary>1. Modeling with Cross-Categorization</summary>
                <div class="collapsible-content">
                    <div class="step-card">
                        <h2><span class="text-indigo-600">Step 0:</span> Travel Survey Data Input</h2>
                        <p class="text-gray-600 mb-4">Enter household survey data to build the trip generation model. Default values are provided.</p>
                        <div class="overflow-x-auto">
                            <table id="surveyTable">
                                <thead>
                                    <tr>
                                        <th>HH Number</th>
                                        <th>Trips per HH</th>
                                        <th>Income ($1000s)</th>
                                        <th>Autos per HH</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="flex flex-wrap gap-4 mt-6 justify-center">
                            <button id="calculateBtn" class="btn btn-primary">Calculate Model</button>
                            <button id="addRowBtn" class="btn btn-secondary">Add Row</button>
                            <button id="clearAllBtn" class="btn btn-danger">Clear All</button>
                        </div>
                    </div>
                    <div id="modelBuildingResults" style="display: none;">
                        <div class="step-card">
                            <h2><span class="text-indigo-600">Step 1:</span> Auto Ownership Model</h2>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
                                <div>
                                    <h3>Household Cross-Classification</h3>
                                    <table id="ownershipTable"></table>
                                </div>
                                <div>
                                    <h3>Ownership vs. Income</h3>
                                    <canvas id="ownershipChart"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="step-card">
                            <h2><span class="text-indigo-600">Step 2:</span> Trip Rate Model</h2>
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
                                <div>
                                    <h3>Average Trips per Household</h3>
                                    <table id="tripRateTable"></table>
                                </div>
                                <div>
                                    <h3>Trip Rate vs. Income & Ownership</h3>
                                    <canvas id="tripRateChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </details>

            <!-- Collapsible Section 2: Model Application -->
            <details>
                <summary>2. Applying the Model (Trip Production)</summary>
                <div class="collapsible-content">
                    <div class="step-card">
                        <div class="flex justify-between items-center border-b-2 border-gray-200 pb-4">
                            <h2 class="text-xl font-bold text-gray-800 m-0 p-0 border-none"><span class="text-indigo-600">Input:</span> Zonal Data & Model Parameters</h2>
                            <button id="importModelBtn" class="btn btn-secondary" disabled>
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                                Import Calculated Model
                            </button>
                        </div>
                         <p class="text-gray-600 my-6">Enter characteristics for the zone you want to analyze, along with the model parameters. You can manually enter parameters or import them from the modeling step above.</p>
                         <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                            <div>
                                <label for="dwellingUnits" class="font-semibold text-gray-700">Total Dwelling Units (Households)</label>
                                <input type="number" id="dwellingUnits" class="mt-1" value="60">
                            </div>
                             <div>
                                <label for="avgIncome" class="font-semibold text-gray-700">Average Zonal Income ($)</label>
                                <input type="number" id="avgIncome" class="mt-1" value="44000">
                            </div>
                        </div>
                         <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                            <div><h3>Step 1: Income Distribution</h3><table id="incomeDistTable"></table></div>
                            <div><h3>Step 2: Auto Ownership Dist. (%)</h3><table id="autoDistTable"></table></div>
                            <div><h3>Step 3: Trip Rates</h3><table id="appTripRateTable"></table></div>
                         </div>
                         <div class="flex justify-center mt-8"><button id="calculateGenerationBtn" class="btn btn-primary">Calculate Produced Trips</button></div>
                    </div>
                    <div id="tripGenerationResults" class="step-card" style="display: none;">
                        <h2><span class="text-indigo-600">Step 4:</span> Trip Production Results</h2>
                        <p class="text-gray-600 mb-4">The table below breaks down the total trip calculation. Each row is calculated as: <br> <code class="bg-gray-100 p-1 rounded">Total HHs Ã— % Income Group Ã— % Auto Group Ã— Trip Rate</code></p>
                        <table id="finalCalcTable"></table>
                        <div class="text-center mt-6"><h3 class="text-2xl font-bold text-gray-800">Total Produced Trips: <span id="totalTrips" class="text-indigo-600">0</span></h3></div>
                    </div>
                </div>
            </details>
            
            <!-- Collapsible Section 3: Trip Attraction -->
            <details>
                <summary>3. Trip Attraction Calculation</summary>
                <div class="collapsible-content">
                    <div class="step-card">
                        <h2><span class="text-indigo-600">Input:</span> Zonal Employment & Attraction Rates</h2>
                        <p class="text-gray-600 mb-6">Calculate trips attracted to a zone based on its land use, like employment numbers. Edit the values below to match your scenario.</p>
                         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <h3>Zonal Employment</h3>
                                <table id="employmentTable"></table>
                                <h3>Attraction Rates (per unit/day)</h3>
                                <div class="overflow-x-auto">
                                    <table id="attractionRateTable"></table>
                                </div>
                            </div>
                            <div id="tripAttractionResults" style="display:none;">
                                <h3>Calculation Results</h3>
                                <table id="attractionCalcTable"></table>
                                <div class="text-center mt-6">
                                    <h3 class="text-2xl font-bold text-gray-800">Total Attracted Trips: <span id="totalAttractedTrips" class="text-indigo-600">0</span></h3>
                                </div>
                            </div>
                         </div>
                         <div class="flex justify-center mt-8"><button id="calculateAttractionBtn" class="btn btn-primary">Calculate Attracted Trips</button></div>
                    </div>
                </div>
            </details>

            <!-- Collapsible Section 4: Trip Balancing -->
            <details>
                <summary>4. Trip Balancing</summary>
                 <div class="collapsible-content">
                    <div class="step-card">
                        <h2><span class="text-indigo-600">Input:</span> Unbalanced Zonal Productions & Attractions</h2>
                         <p class="text-gray-600 mb-6">Enter the total trip productions and attractions for each zone. The tool will adjust the attractions to match the total productions, as productions are typically considered more accurate.</p>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <h3>Unbalanced Trips</h3>
                                <table id="balancingInputTable">
                                    <thead>
                                        <tr>
                                            <th>Zone</th>
                                            <th>Productions</th>
                                            <th>Attractions</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                                <div class="flex justify-center gap-4 mt-4">
                                    <button id="addZoneBtn" class="btn btn-secondary">Add Zone</button>
                                    <button id="calculateBalancingBtn" class="btn btn-primary">Balance Trips</button>
                                </div>
                            </div>
                             <div id="balancingResults" style="display:none;">
                                <h3>Balancing Factor</h3>
                                <p class="text-center text-gray-700 mb-4 bg-gray-50 p-3 rounded-lg">
                                    Factor = Total Productions / Total Attractions = <span id="balancingFactor" class="font-bold text-indigo-600">0</span>
                                </p>
                                <h3>Balanced Trips</h3>
                                <table id="balancedTable"></table>
                            </div>
                        </div>
                    </div>
                 </div>
            </details>
        </div>
        
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- GLOBAL SETUP ---
            let ownershipChartInstance = null;
            let tripRateChartInstance = null;
            let calculatedAutoDist = null;
            let calculatedTripRates = null;
    
            // --- UNIFIED CATEGORIES ---
            const incomeCategories = { 'Low (<$32k)': (i) => i <= 32, 'Medium ($32-48k)': (i) => i > 32 && i <= 48, 'High (>$48k)': (i) => i > 48 };
            const autoCategories = { '0 Autos': (a) => a === 0, '1 Auto': (a) => a === 1, '2+ Autos': (a) => a >= 2 };
    
            // --- MODEL BUILDING ---
            const defaultSurveyData = [
                { hh: 1, trips: 2, income: 16, autos: 0 }, { hh: 2, trips: 4, income: 24, autos: 0 }, { hh: 3, trips: 10, income: 68, autos: 2 },
                { hh: 4, trips: 5, income: 44, autos: 0 }, { hh: 5, trips: 5, income: 18, autos: 1 }, { hh: 6, trips: 15, income: 68, autos: 3 },
                { hh: 7, trips: 7, income: 38, autos: 1 }, { hh: 8, trips: 4, income: 36, autos: 0 }, { hh: 9, trips: 6, income: 28, autos: 1 },
                { hh: 10, trips: 13, income: 76, autos: 3 }, { hh: 11, trips: 8, income: 72, autos: 1 }, { hh: 12, trips: 6, income: 32, autos: 1 },
                { hh: 13, trips: 9, income: 28, autos: 2 }, { hh: 14, trips: 11, income: 44, autos: 2 }, { hh: 15, trips: 10, income: 52, autos: 2 },
                { hh: 16, trips: 11, income: 52, autos: 2 }, { hh: 17, trips: 12, income: 60, autos: 2 }, { hh: 18, trips: 8, income: 44, autos: 1 },
                { hh: 19, trips: 8, income: 52, autos: 1 }, { hh: 20, trips: 6, income: 28, autos: 1 },
            ];
            const surveyTableBody = document.querySelector('#surveyTable tbody');
            const modelBuildingResults = document.getElementById('modelBuildingResults');
    
            const populateSurveyTable = (data) => { surveyTableBody.innerHTML = ''; data.forEach(item => addSurveyTableRow(item.hh, item.trips, item.income, item.autos)); };
            const addSurveyTableRow = (hh = '', trips = '', income = '', autos = '') => {
                const row = document.createElement('tr');
                row.innerHTML = `<td><input type="number" class="hh" value="${hh}" readonly></td><td><input type="number" class="trips" value="${trips}" min="0"></td><td><input type="number" class="income" value="${income}" min="0"></td><td><input type="number" class="autos" value="${autos}" min="0"></td>`;
                surveyTableBody.appendChild(row);
                updateHouseholdNumbers();
            };
            const updateHouseholdNumbers = () => surveyTableBody.querySelectorAll('.hh').forEach((input, index) => input.value = index + 1);
            const calculateAndBuildModel = () => {
                const data = parseTableData(surveyTableBody, ['.trips', '.income', '.autos']);
                if (data.length === 0) { alert("Please enter survey data."); return; }
                modelBuildingResults.style.display = 'block';
                const ownershipData = calculateOwnership(data);
                const tripRateData = calculateTripRates(data);
                const incomeKeys = Object.keys(incomeCategories), autoKeys = Object.keys(autoCategories);
                calculatedAutoDist = incomeKeys.map(incKey => {
                    const total = Object.values(ownershipData[incKey]).reduce((s, v) => s + v, 0);
                    return autoKeys.map(autoKey => total > 0 ? parseFloat(((ownershipData[incKey][autoKey] / total) * 100).toFixed(0)) : 0);
                });
                calculatedTripRates = incomeKeys.map(incKey => autoKeys.map(autoKey => {
                    const cell = tripRateData[incKey][autoKey];
                    return cell.count > 0 ? parseFloat((cell.sum / cell.count).toFixed(1)) : 0;
                }));
                renderOwnershipTable(ownershipData); renderOwnershipChart(ownershipData);
                renderTripRateTable(tripRateData); renderTripRateChart(tripRateData);
                document.getElementById('importModelBtn').disabled = false;
                modelBuildingResults.scrollIntoView({ behavior: 'smooth' });
            };
            const calculateOwnership = (data) => {
                const incomeKeys = Object.keys(incomeCategories), autoKeys = Object.keys(autoCategories);
                const results = incomeKeys.reduce((acc, incKey) => ({...acc, [incKey]: autoKeys.reduce((subAcc, autoKey) => ({...subAcc, [autoKey]: 0 }), {}) }), {});
                data.forEach(hh => {
                    const incKey = incomeKeys.find(key => incomeCategories[key](hh.income));
                    const autoKey = autoKeys.find(key => autoCategories[key](hh.autos));
                    if (incKey && autoKey) results[incKey][autoKey]++;
                });
                return results;
            };
            const renderOwnershipTable = (data) => {
                const table = document.getElementById('ownershipTable');
                let html = `<thead><tr><th>Income</th>`; Object.keys(autoCategories).forEach(h => html += `<th>${h}</th>`); html += `<th>Total</th></tr></thead><tbody>`;
                Object.keys(incomeCategories).forEach(incKey => {
                    const total = Object.values(data[incKey]).reduce((s, v) => s + v, 0);
                    html += `<tr><td>${incKey}</td>`;
                    Object.keys(autoCategories).forEach(autoKey => { const count = data[incKey][autoKey], perc = total > 0 ? ((count / total) * 100).toFixed(0) : 0; html += `<td>${count} (${perc}%)</td>`; });
                    html += `<td>${total}</td></tr>`;
                });
                table.innerHTML = html + `</tbody>`;
            };
            const calculateTripRates = (data) => {
                const incomeKeys = Object.keys(incomeCategories), autoKeys = Object.keys(autoCategories);
                const results = incomeKeys.reduce((acc, incKey) => ({...acc, [incKey]: autoKeys.reduce((subAcc, autoKey) => ({...subAcc, [autoKey]: { sum: 0, count: 0 } }), {}) }), {});
                data.forEach(hh => {
                    const incKey = incomeKeys.find(key => incomeCategories[key](hh.income));
                    const autoKey = autoKeys.find(key => autoCategories[key](hh.autos));
                    if (incKey && autoKey) { results[incKey][autoKey].sum += hh.trips; results[incKey][autoKey].count++; }
                });
                return results;
            };
            const renderTripRateTable = (data) => {
                const table = document.getElementById('tripRateTable');
                let html = `<thead><tr><th>Income</th>`; Object.keys(autoCategories).forEach(h => html += `<th>${h}</th>`); html += `</tr></thead><tbody>`;
                Object.keys(incomeCategories).forEach(incKey => {
                    html += `<tr><td>${incKey}</td>`;
                    Object.keys(autoCategories).forEach(autoKey => { const cell = data[incKey][autoKey], avg = cell.count > 0 ? (cell.sum / cell.count).toFixed(1) : 'â€”'; html += `<td>${avg}</td>`; });
                    html += `</tr>`;
                });
                table.innerHTML = html + `</tbody>`;
            };
            const renderOwnershipChart = (data) => {
                if (ownershipChartInstance) ownershipChartInstance.destroy();
                const ctx = document.getElementById('ownershipChart').getContext('2d');
                ownershipChartInstance = new Chart(ctx, createChartConfig('Household Auto Ownership by Income', 'Households (%)', Object.keys(incomeCategories), Object.keys(autoCategories).map((autoKey, i) => ({ label: `${autoKey}`, data: Object.keys(incomeCategories).map(incKey => { const total = Object.values(data[incKey]).reduce((s, v) => s + v, 0); return total > 0 ? (data[incKey][autoKey] / total) * 100 : 0; }), borderColor: ['#6366f1', '#f97316', '#10b981'][i], }))));
            };
            const renderTripRateChart = (data) => {
                if (tripRateChartInstance) tripRateChartInstance.destroy();
                const ctx = document.getElementById('tripRateChart').getContext('2d');
                tripRateChartInstance = new Chart(ctx, createChartConfig('Average Trips by Income and Auto Ownership', 'Number of Trips / Household', Object.keys(incomeCategories), Object.keys(autoCategories).map((autoKey, i) => ({ label: `${autoKey}`, data: Object.keys(incomeCategories).map(incKey => { const cell = data[incKey][autoKey]; return cell.count > 0 ? (cell.sum / cell.count) : null; }), borderColor: ['#6366f1', '#f97316', '#10b981'][i], }))));
            };
    
            // --- MODEL APPLICATION (PRODUCTION) ---
            const initApplicationTables = () => {
                createInputTable('incomeDistTable', Object.keys(incomeCategories), ['Income', 'Households (%)'], [9, 40, 51], '%');
                createInputTableMatrix('autoDistTable', Object.keys(incomeCategories), Object.keys(autoCategories), [[54, 42, 4], [4, 58, 38], [2, 30, 68]]);
                createInputTableMatrix('appTripRateTable', Object.keys(incomeCategories), Object.keys(autoCategories), [[1, 6, 7], [2, 8, 13], [3, 11, 15]]);
            };
            const calculateGeneratedTrips = () => {
                const dwellings = parseFloat(document.getElementById('dwellingUnits').value) || 0;
                const incomeDist = getTableValues('incomeDistTable').map(v => v / 100);
                const autoDist = getTableValues('autoDistTable', true).map(row => row.map(v => v / 100));
                const tripRates = getTableValues('appTripRateTable', true);
                let totalTrips = 0;
                let resultsHtml = `<thead><tr><th>Income</th><th>Autos</th><th>Calculation</th><th>Trips</th></tr></thead><tbody>`;
                Object.keys(incomeCategories).forEach((incGroup, r) => Object.keys(autoCategories).forEach((autoGroup, c) => {
                    const trips = dwellings * incomeDist[r] * autoDist[r][c] * tripRates[r][c];
                    totalTrips += trips;
                    resultsHtml += `<tr><td class="text-sm">${incGroup}</td><td class="text-sm">${autoGroup}</td><td class="text-xs text-gray-500">${dwellings}Ã—${incomeDist[r].toFixed(2)}Ã—${autoDist[r][c].toFixed(2)}Ã—${tripRates[r][c]}</td><td class="font-semibold">${trips.toFixed(0)}</td></tr>`;
                }));
                document.getElementById('finalCalcTable').innerHTML = resultsHtml + `</tbody>`;
                document.getElementById('totalTrips').textContent = totalTrips.toFixed(0);
                const resultsContainer = document.getElementById('tripGenerationResults');
                resultsContainer.style.display = 'block';
                resultsContainer.scrollIntoView({ behavior: 'smooth' });
            };
            const importCalculatedModel = () => {
                if (!calculatedAutoDist || !calculatedTripRates) { alert("Please calculate a model first."); return; }
                document.querySelectorAll('#autoDistTable .input-cell').forEach(i => i.value = calculatedAutoDist[i.dataset.row][i.dataset.col]);
                document.querySelectorAll('#appTripRateTable .input-cell').forEach(i => i.value = calculatedTripRates[i.dataset.row][i.dataset.col]);
                const btn = document.getElementById('importModelBtn');
                btn.innerHTML = `Model Imported!`; btn.classList.replace('btn-secondary', 'btn-primary');
                setTimeout(() => { btn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" /></svg> Import Calculated Model`; btn.classList.replace('btn-primary', 'btn-secondary'); }, 2000);
            };
    
            // --- TRIP ATTRACTION ---
            const attractionUnits = ['Downtown Retail Emp.', 'Non-retail Emp.', 'Household'];
            const tripPurposes = ['HBW', 'HBO', 'NHB'];
            const initAttractionModule = () => {
                const empTable = document.getElementById('employmentTable');
                let empHtml = `<thead><tr><th>Employment Type</th><th>Number</th></tr></thead><tbody>`;
                attractionUnits.forEach((unit, i) => { if (unit !== 'Household') empHtml += `<tr><td>${unit}</td><td><input type="number" class="emp-input" value="${[220, 650, 0][i]}" data-index="${i}"></td></tr>`; });
                empTable.innerHTML = empHtml + '</tbody>';
                const rateTable = document.getElementById('attractionRateTable');
                let rateHtml = `<thead><tr><th>Purpose</th>`; attractionUnits.forEach(h => rateHtml += `<th>${h}</th>`); rateHtml += `</tr></thead><tbody>`;
                tripPurposes.forEach((purpose, r) => {
                    rateHtml += `<tr><td>${purpose}</td>`;
                    attractionUnits.forEach((_, c) => {
                        let value = 0;
                        if (purpose === 'HBW') value = c < 2 ? 1.7 : 0;
                        if (purpose === 'HBO') value = [5.0, 2.0, 1.0][c];
                        if (purpose === 'NHB') value = [3.0, 1.0, 1.0][c];
                        rateHtml += `<td><input type="number" step="0.1" class="rate-input" value="${value}" data-row="${r}" data-col="${c}"></td>`;
                    });
                    rateHtml += `</tr>`;
                });
                rateTable.innerHTML = rateHtml + '</tbody>';
            };
            const calculateAttractedTrips = () => {
                const employment = Array(attractionUnits.length).fill(0);
                document.querySelectorAll('#employmentTable .emp-input').forEach(i => employment[i.dataset.index] = parseFloat(i.value) || 0);
                const rates = [];
                document.querySelectorAll('#attractionRateTable .rate-input').forEach(i => { const r = i.dataset.row, c = i.dataset.col; if (!rates[r]) rates[r] = []; rates[r][c] = parseFloat(i.value) || 0; });
                let totalAttracted = 0;
                let resultsHtml = `<thead><tr><th>Purpose</th><th>Calculation</th><th>Trips</th></tr></thead><tbody>`;
                tripPurposes.forEach((purpose, r) => {
                    let purposeTotal = 0;
                    let calcString = [];
                    attractionUnits.forEach((unit, c) => { if (employment[c] > 0) { const componentTrips = employment[c] * rates[r][c]; purposeTotal += componentTrips; calcString.push(`(${employment[c]} Ã— ${rates[r][c]})`); } });
                    totalAttracted += purposeTotal;
                    resultsHtml += `<tr><td>${purpose}</td><td class="text-xs text-gray-500">${calcString.join(' + ')}</td><td class="font-semibold">${purposeTotal.toFixed(0)}</td></tr>`;
                });
                document.getElementById('attractionCalcTable').innerHTML = resultsHtml + '</tbody>';
                document.getElementById('totalAttractedTrips').textContent = totalAttracted.toFixed(0);
                document.getElementById('tripAttractionResults').style.display = 'block';
            };
    
            // --- TRIP BALANCING ---
            const balancingTableBody = document.querySelector('#balancingInputTable tbody');
            const initBalancingModule = () => {
                const defaultData = [{prod: 100, attr: 240}, {prod: 200, attr: 400}, {prod: 300, attr: 160}];
                balancingTableBody.innerHTML = '';
                defaultData.forEach(d => addBalancingZoneRow(d.prod, d.attr));
            };
            const addBalancingZoneRow = (prod = '', attr = '') => {
                const row = document.createElement('tr');
                const zoneNum = balancingTableBody.rows.length + 1;
                row.innerHTML = `<td>Zone ${zoneNum}</td><td><input type="number" class="balancing-prod" value="${prod}"></td><td><input type="number" class="balancing-attr" value="${attr}"></td>`;
                balancingTableBody.appendChild(row);
            };
            const calculateBalancing = () => {
                const rows = balancingTableBody.querySelectorAll('tr');
                if (rows.length === 0) { alert("Please add at least one zone."); return; }
                const data = Array.from(rows).map(row => ({
                    prod: parseFloat(row.querySelector('.balancing-prod').value) || 0,
                    attr: parseFloat(row.querySelector('.balancing-attr').value) || 0
                }));
    
                const totalProd = data.reduce((sum, row) => sum + row.prod, 0);
                const totalAttr = data.reduce((sum, row) => sum + row.attr, 0);
                if (totalAttr === 0) { alert("Total attractions cannot be zero."); return; }
    
                const factor = totalProd / totalAttr;
                document.getElementById('balancingFactor').textContent = `${totalProd} / ${totalAttr} = ${factor.toFixed(3)}`;
                
                const balancedTable = document.getElementById('balancedTable');
                let resultsHtml = `<thead><tr><th>Zone</th><th>Productions</th><th>Balanced Attractions</th></tr></thead><tbody>`;
                let balancedTotalAttr = 0;
                data.forEach((row, i) => {
                    const balancedAttr = row.attr * factor;
                    balancedTotalAttr += balancedAttr;
                    resultsHtml += `<tr><td>Zone ${i + 1}</td><td>${row.prod}</td><td>${balancedAttr.toFixed(0)}</td></tr>`;
                });
                 resultsHtml += `<tr class="font-bold bg-gray-50"><td>Total</td><td>${totalProd}</td><td>${balancedTotalAttr.toFixed(0)}</td></tr>`;
                balancedTable.innerHTML = resultsHtml + '</tbody>';
                document.getElementById('balancingResults').style.display = 'block';
            };
    
            // --- UTILITY & SHARED FUNCTIONS ---
            const createChartConfig = (title, yLabel, labels, datasets) => {
                datasets.forEach(ds => { ds.backgroundColor = ds.borderColor + '33'; ds.fill = false; ds.tension = 0.4; });
                return { type: 'line', data: { labels, datasets }, options: { responsive: true, plugins: { title: { display: true, text: title }, legend: { position: 'top' } }, scales: { y: { beginAtZero: true, title: { display: true, text: yLabel } }, x: { title: { display: true, text: 'Income Category' } } } } };
            };
            const parseTableData = (tableBody, selectors) => {
                const data = [];
                tableBody.querySelectorAll('tr').forEach(row => { const [trips, income, autos] = selectors.map(s => parseInt(row.querySelector(s).value)); if (![trips, income, autos].some(isNaN)) data.push({ trips, income, autos }); });
                return data;
            };
            const getTableValues = (tableId, isMatrix = false) => {
                const inputs = document.querySelectorAll(`#${tableId} .input-cell`);
                if (!isMatrix) return Array.from(inputs).map(i => parseFloat(i.value) || 0);
                const values = [];
                inputs.forEach(i => { const r = i.dataset.row, c = i.dataset.col; if (!values[r]) values[r] = []; values[r][c] = parseFloat(i.value) || 0; });
                return values;
            };
            const createInputTable = (tableId, rowHeaders, colHeaders, defaultValues, suffix = '') => {
                const table = document.getElementById(tableId);
                let html = `<thead><tr><th>${colHeaders[0]}</th><th>${colHeaders[1]}</th></tr></thead><tbody>`;
                rowHeaders.forEach((header, r) => { html += `<tr><td>${header}</td><td><input type="number" value="${defaultValues[r]}" class="input-cell" data-row="${r}"> ${suffix}</td></tr>`; });
                table.innerHTML = html + `</tbody>`;
            };
            const createInputTableMatrix = (tableId, rowHeaders, colHeaders, defaultValues) => {
                const table = document.getElementById(tableId);
                let html = `<thead><tr><th>Income</th>`;
                colHeaders.forEach(h => html += `<th>${h}</th>`);
                html += `</tr></thead><tbody>`;
                rowHeaders.forEach((header, r) => { html += `<tr><td>${header}</td>`; colHeaders.forEach((_, c) => { html += `<td><input type="number" value="${defaultValues[r][c]}" class="input-cell" data-row="${r}" data-col="${c}"></td>`; }); html += `</tr>`; });
                table.innerHTML = html + `</tbody>`;
            };
            
            // --- EVENT LISTENERS ---
            document.getElementById('addRowBtn').addEventListener('click', () => addSurveyTableRow());
            document.getElementById('clearAllBtn').addEventListener('click', () => surveyTableBody.innerHTML = '');
            document.getElementById('calculateBtn').addEventListener('click', calculateAndBuildModel);
            document.getElementById('calculateGenerationBtn').addEventListener('click', calculateGeneratedTrips);
            document.getElementById('importModelBtn').addEventListener('click', importCalculatedModel);
            document.getElementById('calculateAttractionBtn').addEventListener('click', calculateAttractedTrips);
            document.getElementById('addZoneBtn').addEventListener('click', () => addBalancingZoneRow());
            document.getElementById('calculateBalancingBtn').addEventListener('click', calculateBalancing);
    
            // --- INITIALIZATION ---
            populateSurveyTable(defaultSurveyData);
            initApplicationTables();
            initAttractionModule();
            initBalancingModule();
        });
    </script>
</body>
</html>
</file>

<file path="partb.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Part B: Trip Distribution - 4-Step Model</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .card { background-color: white; border-radius: 0.75rem; padding: 2rem; margin-bottom: 2rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        .card h2 { font-size: 1.5rem; font-weight: 700; color: #111827; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #e5e7eb; }
        .card h3 { font-size: 1.25rem; font-weight: 600; color: #374151; margin-top: 1.5rem; margin-bottom: 1rem; }
        table { width: 100%; border-collapse: collapse; }
        th, td { text-align: center; padding: 0.75rem; border: 1px solid #e5e7eb; position: relative; }
        th { background-color: #f9fafb; font-weight: 600; color: #4b5563; }
        input[type="number"] { width: 100%; padding: 0.5rem; border-radius: 0.375rem; border: 1px solid #d1d5db; text-align: center; -moz-appearance: textfield; }
        input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
        .btn { padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease-in-out; border: none; display: inline-flex; align-items: center; gap: 0.5rem; }
        .btn:disabled { background-color: #d1d5db; color: #6b7280; cursor: not-allowed; }
        .btn-primary { background-color: #4f46e5; color: white; } .btn-primary:hover:not(:disabled) { background-color: #4338ca; }
        .btn-secondary { background-color: #e5e7eb; color: #374151; } .btn-secondary:hover { background-color: #d1d5db; }
        .notification { padding: 1rem; border-radius: 0.5rem; margin-top: 1.5rem; text-align: center; font-weight: 500; }
        .notification-error { background-color: #fee2e2; color: #b91c1c; }
        .notification-success { background-color: #dcfce7; color: #166534; }
        .calculation-box {
            background-color: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-top: 1.5rem;
            font-family: monospace;
            font-size: 0.9rem;
            line-height: 1.6;
            color: #374151;
            overflow-x: auto;
        }
        .formula { font-style: italic; color: #4b5563; margin-bottom: 0.5rem; display: block; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800">The 4-Step Transportation Planning Model</h1>
            <p class="text-lg text-gray-600 mt-2">Part B: Trip Distribution (Gravity Model)</p>
        </header>

        <!-- Navigation -->
        <nav class="bg-white rounded-lg shadow-sm mb-8 p-2 flex justify-center">
             <a href="index.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part A: Trip Generation</a>
             <a href="partB.html" class="px-4 py-2 text-indigo-600 font-bold border-b-2 border-indigo-600">Part B: Trip Distribution</a>
             <a href="partC.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part C: Mode Choice</a>
             <a href="partD.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part D: Trip Assignment</a>
        </nav>

        <!-- Main Content -->
        <div id="inputsContainer" class="card">
            <h2 class="text-2xl font-bold text-gray-800">Inputs</h2>
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4">
                <div>
                    <h3><span class="text-indigo-600">1.</span> Zonal Data</h3>
                    <table id="zonalDataTable">
                        <thead><tr><th>Zone</th><th>Productions (P)</th><th>Attractions (A)</th></tr></thead>
                        <tbody></tbody>
                    </table>
                    <div class="flex justify-center gap-4 mt-4">
                        <button id="addZoneBtn" class="btn btn-secondary">Add Zone</button>
                        <button id="removeZoneBtn" class="btn btn-secondary">Remove Zone</button>
                    </div>
                </div>
                <div>
                    <h3><span class="text-indigo-600">2.</span> Travel Times (t)</h3>
                    <div id="travelTimeContainer" class="overflow-x-auto"></div>
                </div>
                <div>
                     <h3><span class="text-indigo-600">3.</span> Friction Factors (F)</h3>
                     <table id="frictionFactorTable">
                        <thead><tr><th>Time (min)</th><th>Friction Factor (F)</th></tr></thead>
                        <tbody></tbody>
                     </table>
                     <div class="flex justify-center gap-4 mt-4">
                        <button id="addFrictionRowBtn" class="btn btn-secondary">Add Row</button>
                     </div>
                </div>
            </div>
        </div>
        
        <div id="resultsMainContainer">
            <div class="card">
                <h2><span class="text-indigo-600">4.</span> Calculation & Results</h2>
                <p class="text-gray-600 mb-4">Generate the intermediate tables and calculate the final trip distribution. Ensure productions and attractions are balanced before the final calculation.</p>
                <div class="flex justify-center">
                    <button id="generateInitialBtn" class="btn btn-primary">Start Calculation</button>
                </div>
                <div id="balanceNotification" class="mt-4"></div>
                <div class="flex justify-center mt-4">
                    <button id="balanceAttractionsBtn" class="btn btn-secondary" style="display: none;">Balance Attractions</button>
                </div>
            </div>
            <div id="resultsContainer" style="display: none;">
                <div class="card">
                    <h3>Intermediate Table: A_j * F_ij * K_ij</h3>
                    <p class="text-sm text-gray-500 mb-2">This table shows the product of attractions, friction factors, and K-factors (assumed to be 1) for each zone pair.</p>
                    <div id="intermediateTableContainer" class="overflow-x-auto"></div>
                </div>
                <div class="card">
                    <h3 class="mb-4">Final Result: Trip Distribution Table (T_ij)</h3>
                    <div id="distributionSteps" class="space-y-6">
                        <!-- Iteration steps will be injected here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // --- DEFAULT DATA ---
        const defaultZonalData = [{ P: 140, A: 300 }, { P: 330, A: 270 }, { P: 280, A: 180 }];
        const defaultTravelTimes = [[5, 2, 3], [2, 6, 6], [3, 6, 5]];
        const defaultFrictionFactors = [{ t: 1, F: 82 }, { t: 2, F: 52 }, { t: 3, F: 50 }, { t: 4, F: 41 }, { t: 5, F: 39 }, { t: 6, F: 26 }, { t: 7, F: 20 }, { t: 8, F: 13 }];
        
        let numZones = 0;
        let currentTripTable = [];
        let adjustedAttractions = [];
    
        // --- UI ELEMENTS ---
        const zonalTableBody = document.querySelector('#zonalDataTable tbody');
        const travelTimeContainer = document.getElementById('travelTimeContainer');
        const frictionTableBody = document.querySelector('#frictionFactorTable tbody');
        const notificationEl = document.getElementById('balanceNotification');
        const balanceBtn = document.getElementById('balanceAttractionsBtn');
        const resultsContainer = document.getElementById('resultsContainer');
        const distributionStepsContainer = document.getElementById('distributionSteps');
    
        // --- INITIALIZATION ---
        const init = () => {
            defaultZonalData.forEach(() => addZone());
            document.querySelectorAll('#zonalDataTable .prod-input').forEach((input, i) => input.value = defaultZonalData[i].P);
            document.querySelectorAll('#zonalDataTable .attr-input').forEach((input, i) => input.value = defaultZonalData[i].A);
            updateTravelTimeTable();
            document.querySelectorAll('#travelTimeTable input').forEach(input => { input.value = defaultTravelTimes[input.dataset.row][input.dataset.col]; });
            frictionTableBody.innerHTML = '';
            defaultFrictionFactors.forEach(ff => addFrictionRow(ff.t, ff.F));
        };
    
        // --- DYNAMIC TABLE FUNCTIONS ---
        const addZone = () => { numZones++; zonalTableBody.innerHTML += `<tr><td>${numZones}</td><td><input type="number" class="prod-input"></td><td><input type="number" class="attr-input"></td></tr>`; updateTravelTimeTable(); };
        const removeZone = () => { if (numZones > 1) { zonalTableBody.lastChild.remove(); numZones--; updateTravelTimeTable(); } };
        const updateTravelTimeTable = () => {
            let table = `<table id="travelTimeTable"><thead><tr><th>Zone</th>${Array.from({length: numZones}, (_, i) => `<th>${i + 1}</th>`).join('')}</tr></thead><tbody>`;
            for (let i = 0; i < numZones; i++) { table += `<tr><td>${i + 1}</td>${Array.from({length: numZones}, (_, j) => `<td><input type="number" data-row="${i}" data-col="${j}"></td>`).join('')}</tr>`; }
            travelTimeContainer.innerHTML = table + `</tbody></table>`;
        };
        const addFrictionRow = (time = '', factor = '') => { frictionTableBody.innerHTML += `<tr><td><input type="number" value="${time}"></td><td><input type="number" value="${factor}"></td></tr>`; };
    
        // --- DATA GATHERING ---
        const getZonalData = () => ({
            productions: Array.from(document.querySelectorAll('.prod-input')).map(i => parseFloat(i.value) || 0),
            attractions: Array.from(document.querySelectorAll('.attr-input')).map(i => parseFloat(i.value) || 0)
        });
        const getTravelTimes = () => Array.from({ length: numZones }, (_, i) => Array.from({ length: numZones }, (_, j) => parseFloat(document.querySelector(`#travelTimeTable input[data-row="${i}"][data-col="${j}"]`).value) || 0));
        const getFrictionFactors = () => {
            const factors = new Map();
            frictionTableBody.querySelectorAll('tr').forEach(row => {
                const inputs = row.querySelectorAll('input');
                const time = parseInt(inputs[0].value), factor = parseFloat(inputs[1].value);
                if (!isNaN(time) && !isNaN(factor)) factors.set(time, factor);
            });
            return factors;
        };
    
        // --- CALCULATION LOGIC ---
        const generateInitialTables = () => {
            distributionStepsContainer.innerHTML = '';
            const { productions, attractions } = getZonalData();
            const totalP = productions.reduce((a, b) => a + b, 0);
            const totalA = attractions.reduce((a, b) => a + b, 0);
            
            notificationEl.innerHTML = '';
            if (Math.round(totalP) !== Math.round(totalA)) {
                notificationEl.innerHTML = `<div class="notification notification-error">Productions (${totalP}) and Attractions (${totalA}) are not balanced.</div>`;
                balanceBtn.style.display = 'inline-flex';
            } else {
                notificationEl.innerHTML = `<div class="notification notification-success">Productions (${totalP}) and Attractions (${totalA}) are balanced.</div>`;
                balanceBtn.style.display = 'none';
            }
    
            const travelTimes = getTravelTimes();
            const frictionFactors = getFrictionFactors();
            const frictionMatrix = travelTimes.map(row => row.map(time => getFrictionFactor(time, frictionFactors)));
            const intermediateMatrix = Array.from({length: numZones}, (_, i) => Array.from({length: numZones}, (_, j) => attractions[j] * frictionMatrix[i][j]));
            
            renderMatrix('intermediateTableContainer', intermediateMatrix, 'A_j * F_ij');
            
            distributionStepsContainer.innerHTML += createDistributionStepHTML('singly', 'Iteration 1: Singly Constrained Distribution');
            document.getElementById('calcSinglyBtn').addEventListener('click', calculateSinglyConstrainedDistribution);
            resultsContainer.style.display = 'block';
        };
    
        const balanceAttractions = () => {
            const { productions, attractions } = getZonalData();
            const totalP = productions.reduce((a, b) => a + b, 0);
            const totalA = attractions.reduce((a, b) => a + b, 0);
            if (totalA === 0) return alert("Total attractions cannot be zero.");
            const factor = totalP / totalA;
            const attrInputs = document.querySelectorAll('.attr-input');
            let newTotalA = 0;
            attrInputs.forEach((input, i) => {
                const newVal = Math.round(attractions[i] * factor);
                if (i === attrInputs.length - 1) { input.value = totalP - newTotalA; }
                else { input.value = newVal; newTotalA += newVal; }
            });
            generateInitialTables();
        };
    
        const calculateSinglyConstrainedDistribution = () => {
            const { productions, attractions } = getZonalData();
            const travelTimes = getTravelTimes();
            const frictionFactors = getFrictionFactors();
            const frictionMatrix = travelTimes.map(row => row.map(time => getFrictionFactor(time, frictionFactors)));
    
            currentTripTable = [];
            const denominators = [];
            for (let i = 0; i < numZones; i++) {
                currentTripTable[i] = [];
                const denominator = attractions.reduce((sum, Aj, j) => sum + (Aj * frictionMatrix[i][j]), 0);
                denominators.push(denominator);
                for (let j = 0; j < numZones; j++) {
                    currentTripTable[i][j] = (denominator === 0) ? 0 : productions[i] * (attractions[j] * frictionMatrix[i][j]) / denominator;
                }
            }
            
            renderMatrix('singly-results', currentTripTable, 'T_ij');
            showSinglyCalcDetails(productions, attractions, frictionMatrix, denominators);
            document.getElementById('calcSinglyBtn').disabled = true;
            
            distributionStepsContainer.innerHTML += createDistributionStepHTML('adjust', 'Iteration 2: Adjust Attraction Values');
            document.getElementById('calcAdjustBtn').addEventListener('click', calculateAdjustedAttractions);
        };
    
        const calculateAdjustedAttractions = () => {
            const { attractions } = getZonalData();
            const computedAttractions = Array.from({ length: numZones }, (_, j) => currentTripTable.reduce((sum, row) => sum + row[j], 0));
            
            adjustedAttractions = attractions.map((targetA, j) => {
                return computedAttractions[j] === 0 ? 0 : targetA * (targetA / computedAttractions[j]);
            });
    
            showAdjustedAttractionCalcs(attractions, computedAttractions, adjustedAttractions);
            document.getElementById('calcAdjustBtn').disabled = true;
    
            distributionStepsContainer.innerHTML += createDistributionStepHTML('doubly', 'Iteration 2: Doubly Constrained Distribution');
            document.getElementById('calcDoublyBtn').addEventListener('click', calculateSecondIteration);
        };
        
        const calculateSecondIteration = () => {
            const { productions } = getZonalData();
            const travelTimes = getTravelTimes();
            const frictionFactors = getFrictionFactors();
            const frictionMatrix = travelTimes.map(row => row.map(time => getFrictionFactor(time, frictionFactors)));
    
            let finalTripTable = [];
            const denominators = [];
            for (let i = 0; i < numZones; i++) {
                finalTripTable[i] = [];
                const denominator = adjustedAttractions.reduce((sum, adjA, j) => sum + (adjA * frictionMatrix[i][j]), 0);
                denominators.push(denominator);
                for (let j = 0; j < numZones; j++) {
                    finalTripTable[i][j] = (denominator === 0) ? 0 : productions[i] * (adjustedAttractions[j] * frictionMatrix[i][j]) / denominator;
                }
            }
            currentTripTable = finalTripTable;
            renderMatrixWithComparison('doubly-results', finalTripTable);
            showSecondIterationCalcDetails(productions, adjustedAttractions, frictionMatrix, denominators);
            document.getElementById('calcDoublyBtn').disabled = true;
        };
        
        // --- UTILITY & RENDERING ---
        const getFrictionFactor = (time, factors) => {
            if (factors.has(time)) return factors.get(time);
            const sortedTimes = Array.from(factors.keys()).sort((a,b) => a-b);
            if (time <= sortedTimes[0]) return factors.get(sortedTimes[0]);
            if (time >= sortedTimes[sortedTimes.length - 1]) return factors.get(sortedTimes[sortedTimes.length - 1]);
            let lowerT, upperT;
            for(const t of sortedTimes) { if (t < time) lowerT = t; if (t > time) { upperT = t; break; } }
            const lowerF = factors.get(lowerT), upperF = factors.get(upperT);
            return lowerF + (upperF - lowerF) * (time - lowerT) / (upperT - lowerT);
        };
    
        const createDistributionStepHTML = (id, title) => {
            return `<div class="border-t pt-6">
                        <div class="flex justify-between items-center">
                            <h4>${title}</h4>
                            <button id="calc${id.charAt(0).toUpperCase() + id.slice(1)}Btn" class="btn btn-secondary btn-sm">Calculate</button>
                        </div>
                        <div id="${id}-results" class="overflow-x-auto mt-4"></div>
                        <div id="${id}-calcs"></div>
                    </div>`;
        };
    
        const showSinglyCalcDetails = (prods, attrs, fMatrix, denoms) => {
            const calcDiv = document.getElementById('singly-calcs');
            let html = `<div class="calculation-box"><span class="formula">T_ij = P_i * [A_j * F_ij] / &Sigma;(A_k * F_ik)</span>`;
            for (let i = 0; i < numZones; i++) {
                html += `<strong class="block mt-2">For Zone ${i + 1} (P = ${prods[i]}):</strong>`;
                for (let j = 0; j < numZones; j++) {
                    html += `T_${i + 1}-${j + 1} = ${prods[i]} * [${attrs[j]} * ${fMatrix[i][j].toFixed(1)}] / [${denoms[i].toFixed(0)}] = ${currentTripTable[i][j].toFixed(0)}<br>`;
                }
            }
            calcDiv.innerHTML = html + '</div>';
        };
        
        const showAdjustedAttractionCalcs = (targetAttrs, computedAttrs, adjustedAttrs) => {
            const resultDiv = document.getElementById('adjust-results');
            const calcDiv = document.getElementById('adjust-calcs');
            
            let tableHtml = `<table><thead><tr><th>Zone</th><th>Target A (A_j)</th><th>Computed A (C_j)</th><th>New A (A_j_new)</th></tr></thead><tbody>`;
            for (let j = 0; j < numZones; j++) {
                tableHtml += `<tr><td>${j + 1}</td><td>${targetAttrs[j]}</td><td>${computedAttrs[j].toFixed(2)}</td><td class="font-bold">${adjustedAttrs[j].toFixed(2)}</td></tr>`;
            }
            resultDiv.innerHTML = tableHtml + `</tbody></table>`;
    
            let html = `<div class="calculation-box"><span class="formula">A_j_new = A_j_target * (A_j_target / A_j_computed)</span>`;
            for(let j=0; j < numZones; j++) {
                html += `Zone ${j+1}: A_${j+1}_new = ${targetAttrs[j]} * (${targetAttrs[j]} / ${computedAttrs[j].toFixed(2)}) = ${adjustedAttrs[j].toFixed(2)}<br>`;
            }
            calcDiv.innerHTML = html + '</div>';
        };
        
        const showSecondIterationCalcDetails = (prods, adjAttrs, fMatrix, denoms) => {
            const calcDiv = document.getElementById('doubly-calcs');
            let html = `<div class="calculation-box"><span class="formula">T_ij = P_i * [A_j_new * F_ij] / &Sigma;(A_k_new * F_ik)</span>`;
            for (let i = 0; i < numZones; i++) {
                 html += `<strong class="block mt-2">For Zone ${i + 1} (P = ${prods[i]}):</strong>`;
                for (let j = 0; j < numZones; j++) {
                    html += `T_${i + 1}-${j + 1} = ${prods[i]} * [${adjAttrs[j].toFixed(1)} * ${fMatrix[i][j].toFixed(1)}] / [${denoms[i].toFixed(0)}] = ${currentTripTable[i][j].toFixed(0)}<br>`;
                }
            }
            calcDiv.innerHTML = html + '</div>';
        };
    
        const renderMatrix = (containerId, matrix, title) => {
            const container = document.getElementById(containerId);
            let table = `<table><thead><tr><th>${title}</th>${Array.from({length: numZones}, (_, i) => `<th>${i + 1}</th>`).join('')}<th>Total</th></tr></thead><tbody>`;
            matrix.forEach((row, i) => {
                table += `<tr><td>${i + 1}</td>`;
                row.forEach((val) => { table += `<td>${val.toFixed(0)}</td>`; });
                table += `<td class="font-bold">${row.reduce((s, v) => s + v, 0).toFixed(0)}</td></tr>`;
            });
            table += `<tr class="font-bold bg-gray-50"><td>Total</td>`;
            let grandTotal = 0;
            for (let j = 0; j < numZones; j++) {
                const colSum = matrix.reduce((s, r) => s + r[j], 0); grandTotal += colSum;
                table += `<td>${colSum.toFixed(0)}</td>`;
            }
            table += `<td>${grandTotal.toFixed(0)}</td></tr></tbody></table>`;
            container.innerHTML = table;
        };
        
        const renderMatrixWithComparison = (containerId, matrix) => {
            const { productions, attractions } = getZonalData();
            const container = document.getElementById(containerId);
            let table = `<table><thead><tr><th>Zone</th>${Array.from({length: numZones}, (_, i) => `<th>${i + 1}</th>`).join('')}<th>Computed P</th><th>Given P</th></tr></thead><tbody>`;
            matrix.forEach((row, i) => {
                table += `<tr><td>${i + 1}</td>`;
                row.forEach((val) => { table += `<td>${val.toFixed(0)}</td>`; });
                const computedP = row.reduce((s, v) => s + v, 0);
                table += `<td class="font-semibold">${computedP.toFixed(0)}</td><td class="bg-gray-50">${productions[i]}</td></tr>`;
            });
            // Computed A row
            table += `<tr class="font-semibold"><td class="bg-gray-50">Computed A</td>`;
            for (let j = 0; j < numZones; j++) {
                const colSum = matrix.reduce((s, r) => s + r[j], 0);
                table += `<td>${colSum.toFixed(0)}</td>`;
            }
            table += `<td class="bg-gray-100">${productions.reduce((s,v)=>s+v,0)}</td><td class="bg-gray-100">${attractions.reduce((s,v)=>s+v,0)}</td></tr>`;
            // Given A row
            table += `<tr class="bg-gray-50"><td class="font-semibold">Given A</td>`;
            attractions.forEach(a => table += `<td>${a}</td>`);
            table += `<td class="bg-gray-100"></td><td class="bg-gray-100"></td></tr>`;
    
            table += `</tbody></table>`;
            container.innerHTML = table;
        };
        
        // --- EVENT LISTENERS ---
        document.getElementById('addZoneBtn').addEventListener('click', addZone);
        document.getElementById('removeZoneBtn').addEventListener('click', removeZone);
        document.getElementById('addFrictionRowBtn').addEventListener('click', () => addFrictionRow());
        document.getElementById('generateInitialBtn').addEventListener('click', generateInitialTables);
        balanceBtn.addEventListener('click', balanceAttractions);
    
        // --- RUN ---
        init();
    });
</script>

</body>
</html>
</file>

<file path="partc.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Part C: Mode Choice - 4-Step Model</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .card { background-color: white; border-radius: 0.75rem; padding: 2rem; margin-bottom: 2rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        .card h2 { font-size: 1.5rem; font-weight: 700; color: #111827; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #e5e7eb; }
        .card h3 { font-size: 1.25rem; font-weight: 600; color: #374151; margin-top: 1.5rem; margin-bottom: 1rem; }
        table { width: 100%; border-collapse: collapse; }
        th, td { text-align: center; padding: 0.75rem; border: 1px solid #e5e7eb; }
        th { background-color: #f9fafb; font-weight: 600; color: #4b5563; }
        input[type="text"], input[type="number"] { width: 100%; padding: 0.5rem; border-radius: 0.375rem; border: 1px solid #d1d5db; text-align: center; }
        input[type="number"] { -moz-appearance: textfield; }
        input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
        .btn { padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease-in-out; border: none; display: inline-flex; align-items: center; gap: 0.5rem; }
        .btn-sm { padding: 0.5rem 1rem; font-size: 0.875rem; }
        .btn-danger-sm { padding: 0.25rem; font-size: 0.75rem; background-color: #fee2e2; color: #ef4444; border-radius: 9999px; }
        .btn-danger-sm:hover { background-color: #fecaca; }
        .btn-primary { background-color: #4f46e5; color: white; } .btn-primary:hover:not(:disabled) { background-color: #4338ca; }
        .btn-secondary { background-color: #e5e7eb; color: #374151; } .btn-secondary:hover { background-color: #d1d5db; }
        .calculation-box { background-color: #f9fafb; border: 1px solid #e5e7eb; border-radius: 0.5rem; padding: 1.5rem; margin-top: 1.5rem; font-family: monospace; font-size: 1rem; line-height: 1.8; color: #374151; overflow-x: auto; }
        .formula { font-style: italic; color: #4b5563; margin-bottom: 1rem; display: block; border-bottom: 1px solid #e5e7eb; padding-bottom: 1rem;}
        .result-grid { display: grid; grid-template-columns: auto 1fr auto 1fr; align-items: center; gap: 0.5rem 1rem; }
        .result-grid .equals { text-align: center; font-weight: bold; }
        .final-split { font-size: 1.25rem; font-weight: bold; text-align: center; padding: 1.5rem; background-color: #eef2ff; border-radius: 0.5rem; color: #4338ca; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800">The 4-Step Transportation Planning Model</h1>
            <p class="text-lg text-gray-600 mt-2">Part C: Mode Choice (Logit Model)</p>
        </header>

        <!-- Navigation -->
        <nav class="bg-white rounded-lg shadow-sm mb-8 p-2 flex justify-center">
             <a href="index.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part A: Trip Generation</a>
             <a href="partB.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part B: Trip Distribution</a>
             <a href="partC.html" class="px-4 py-2 text-indigo-600 font-bold border-b-2 border-indigo-600">Part C: Mode Choice</a>
             <a href="partD.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part D: Trip Assignment</a>
        </nav>

        <!-- Main Content -->
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
            <!-- Left Column: Inputs -->
            <div>
                <div class="card">
                    <h2><span class="text-indigo-600">1.</span> Define Model Structure</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div>
                            <h3>Travel Modes</h3>
                            <div id="modesList" class="space-y-2 mb-3"></div>
                            <div class="flex gap-2">
                                <input type="text" id="newModeName" placeholder="e.g., Bike" class="flex-grow">
                                <button id="addModeBtn" class="btn btn-secondary btn-sm">Add</button>
                            </div>
                        </div>
                        <div>
                            <h3>Travel Characteristics</h3>
                            <div id="charsList" class="space-y-2 mb-3"></div>
                            <div class="flex gap-2">
                                <input type="text" id="newCharName" placeholder="e.g., Fare" class="flex-grow">
                                <button id="addCharBtn" class="btn btn-secondary btn-sm">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
                 <div class="card">
                    <h2><span class="text-indigo-600">2.</span> Define Utility Functions</h2>
                    <p class="text-gray-600 mb-4">Enter the coefficients for each mode's utility function: <span class="font-mono">U = Constant + &Sigma;(Coeff * Value)</span></p>
                    <div id="utilityFunctionsContainer" class="overflow-x-auto"></div>
                </div>
                <div class="card">
                    <h2><span class="text-indigo-600">3.</span> Input Zone-Pair Characteristics</h2>
                     <p class="text-gray-600 mb-4">Enter the actual travel characteristic values for the zone pair being analyzed.</p>
                    <div id="characteristicValuesContainer" class="overflow-x-auto"></div>
                </div>
            </div>

            <!-- Right Column: Calculation & Results -->
            <div>
                <div class="card">
                    <div class="flex justify-between items-center">
                         <h2><span class="text-indigo-600">4.</span> Calculation & Results</h2>
                         <button id="calculateBtn" class="btn btn-primary">Calculate Mode Split</button>
                    </div>
                    <div id="resultsContainer" style="display: none;" class="mt-4">
                        <h3>Utility Calculation</h3>
                        <div id="utilityCalcs" class="calculation-box"></div>
                        
                        <h3 class="mt-6">Probability Calculation (Logit Model)</h3>
                        <div id="probabilityCalcs" class="calculation-box"></div>

                        <h3 class="mt-6">Final Mode Split</h3>
                        <div id="finalSplitResult" class="final-split"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let modes = [];
        let characteristics = [];
    
        const elements = {
            modesList: document.getElementById('modesList'),
            newModeName: document.getElementById('newModeName'),
            addModeBtn: document.getElementById('addModeBtn'),
            charsList: document.getElementById('charsList'),
            newCharName: document.getElementById('newCharName'),
            addCharBtn: document.getElementById('addCharBtn'),
            utilityFunctionsContainer: document.getElementById('utilityFunctionsContainer'),
            characteristicValuesContainer: document.getElementById('characteristicValuesContainer'),
            calculateBtn: document.getElementById('calculateBtn'),
            resultsContainer: document.getElementById('resultsContainer'),
            utilityCalcs: document.getElementById('utilityCalcs'),
            probabilityCalcs: document.getElementById('probabilityCalcs'),
            finalSplitResult: document.getElementById('finalSplitResult')
        };
    
        const init = () => {
            // Default setup from user's image
            addCharacteristic('T1 (Total Time)');
            addCharacteristic('T2 (Wait Time)');
            addCharacteristic('C (Cost)');
            addMode('Auto');
            addMode('Transit');
            
            // Populate default utility functions
            const utilityDefaults = {
                'Auto': [-0.46, -0.35, -0.08, -0.005],
                'Transit': [-0.07, -0.05, -0.15, -0.005]
            };
            document.querySelectorAll('#utilityFunctionsTable tbody tr').forEach((row, rowIndex) => {
                row.querySelectorAll('input').forEach((input, colIndex) => {
                    input.value = utilityDefaults[modes[rowIndex]][colIndex];
                });
            });
            
            // Populate default characteristic values
            const valueDefaults = {
                'T1 (Total Time)': [20, 30],
                'T2 (Wait Time)': [8, 6],
                'C (Cost)': [320, 100]
            };
            document.querySelectorAll('#characteristicValuesTable tbody tr').forEach((row, rowIndex) => {
                row.querySelectorAll('input').forEach((input, colIndex) => {
                    input.value = valueDefaults[characteristics[rowIndex]][colIndex];
                });
            });
        };
    
        const addMode = (name) => {
            const modeName = (typeof name === 'string' ? name : elements.newModeName.value.trim());
            if (!modeName || modes.includes(modeName)) {
                if (typeof name !== 'string') alert("Mode name cannot be empty or a duplicate.");
                return;
            }
            modes.push(modeName);
            if (typeof name !== 'string') elements.newModeName.value = '';
            render();
        };
    
        const removeMode = (index) => {
            modes.splice(index, 1);
            render();
        };
    
        const addCharacteristic = (name) => {
            const charName = (typeof name === 'string' ? name : elements.newCharName.value.trim());
            if (!charName || characteristics.includes(charName)) {
                 if (typeof name !== 'string') alert("Characteristic name cannot be empty or a duplicate.");
                return;
            }
            characteristics.push(charName);
            if (typeof name !== 'string') elements.newCharName.value = '';
            render();
        };
    
        const removeCharacteristic = (index) => {
            characteristics.splice(index, 1);
            render();
        };
    
        const render = () => {
            renderLists();
            renderUtilityFunctionsTable();
            renderCharacteristicValuesTable();
        };
    
        const renderLists = () => {
            elements.modesList.innerHTML = modes.map((mode, index) => `
                <div class="flex items-center justify-between bg-gray-100 p-2 rounded">
                    <span>${mode}</span>
                    <button class="btn-danger-sm" data-index="${index}" data-type="mode">&times;</button>
                </div>`).join('');
            elements.charsList.innerHTML = characteristics.map((char, index) => `
                <div class="flex items-center justify-between bg-gray-100 p-2 rounded">
                    <span>${char}</span>
                    <button class="btn-danger-sm" data-index="${index}" data-type="char">&times;</button>
                </div>`).join('');
        };
    
        const renderUtilityFunctionsTable = () => {
            let table = `<table id="utilityFunctionsTable"><thead><tr><th>Mode</th><th>Constant</th>`;
            characteristics.forEach(char => table += `<th>${char}</th>`);
            table += `</tr></thead><tbody>`;
            modes.forEach(mode => {
                table += `<tr><td>${mode}</td><td><input type="number" step="0.01"></td>`;
                characteristics.forEach(() => table += `<td><input type="number" step="0.001"></td>`);
                table += `</tr>`;
            });
            elements.utilityFunctionsContainer.innerHTML = table + `</tbody></table>`;
        };
    
        const renderCharacteristicValuesTable = () => {
            let table = `<table id="characteristicValuesTable"><thead><tr><th>Characteristic</th>`;
            modes.forEach(mode => table += `<th>${mode}</th>`);
            table += `</tr></thead><tbody>`;
            characteristics.forEach(char => {
                table += `<tr><td>${char}</td>`;
                modes.forEach(() => table += `<td><input type="number"></td>`);
                table += `</tr>`;
            });
            elements.characteristicValuesContainer.innerHTML = table + `</tbody></table>`;
        };
    
        const calculate = () => {
            // Read data from tables
            const utilityCoeffs = Array.from(document.querySelectorAll('#utilityFunctionsTable tbody tr')).map(row => 
                Array.from(row.querySelectorAll('input')).map(input => parseFloat(input.value) || 0)
            );
            const charValues = Array.from(document.querySelectorAll('#characteristicValuesTable tbody tr')).map(row => 
                Array.from(row.querySelectorAll('input')).map(input => parseFloat(input.value) || 0)
            );
    
            // Calculate Utilities
            let utilityResults = {};
            let utilityCalcsHTML = `<span class="formula">U_x = a_0 + &Sigma;(a_i * x_i)</span>`;
            modes.forEach((mode, i) => {
                const constant = utilityCoeffs[i][0];
                let utility = constant;
                let calcString = `${constant}`;
                characteristics.forEach((char, j) => {
                    const coeff = utilityCoeffs[i][j + 1];
                    const value = charValues[j][i];
                    utility += coeff * value;
                    calcString += ` + (${coeff} * ${value})`;
                });
                utilityResults[mode] = utility;
                utilityCalcsHTML += `<div class="result-grid"><strong>U<sub>${mode}</sub></strong> <span class="equals">=</span> <span>${calcString}</span> <span class="equals">=</span> <strong>${utility.toFixed(2)}</strong></div>`;
            });
            elements.utilityCalcs.innerHTML = utilityCalcsHTML;
            
            // Calculate Probabilities
            let probabilityResults = {};
            let sumExpUtility = 0;
            Object.values(utilityResults).forEach(u => sumExpUtility += Math.exp(u));
    
            let probabilityCalcsHTML = `<span class="formula">P_x = e<sup>U_x</sup> / &Sigma;(e<sup>U_k</sup>)</span>`;
            let finalSplitHTML = '';
            modes.forEach(mode => {
                const utility = utilityResults[mode];
                const probability = Math.exp(utility) / sumExpUtility;
                probabilityResults[mode] = probability;
                
                const expStrings = modes.map(m => `e<sup>${utilityResults[m].toFixed(2)}</sup>`).join(' + ');
                probabilityCalcsHTML += `<div class="result-grid"><strong>P<sub>${mode}</sub></strong> <span class="equals">=</span> <span>e<sup>${utility.toFixed(2)}</sup> / (${expStrings})</span> <span class="equals">=</span> <strong>${probability.toFixed(3)}</strong></div>`;
                finalSplitHTML += `<div>${mode}: <strong>${(probability * 100).toFixed(1)}%</strong></div>`;
            });
            elements.probabilityCalcs.innerHTML = probabilityCalcsHTML;
            elements.finalSplitResult.innerHTML = finalSplitHTML;
    
            elements.resultsContainer.style.display = 'block';
        };
    
        // Event Listeners
        elements.addModeBtn.addEventListener('click', () => addMode());
        elements.addCharBtn.addEventListener('click', () => addCharacteristic());
        elements.calculateBtn.addEventListener('click', calculate);
    
        document.body.addEventListener('click', (e) => {
            if (e.target.dataset.type === 'mode') {
                removeMode(parseInt(e.target.dataset.index));
            } else if (e.target.dataset.type === 'char') {
                removeCharacteristic(parseInt(e.target.dataset.index));
            }
        });
    
        init();
    });
</script>

</body>
</html>
</file>

<file path="partd.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Part D: Trip Assignment - 4-Step Model</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; }
        .card { background-color: white; border-radius: 0.75rem; padding: 2rem; margin-bottom: 2rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); }
        .card h2 { font-size: 1.5rem; font-weight: 700; color: #111827; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #e5e7eb; }
        .btn { padding: 0.75rem 1.5rem; border-radius: 0.5rem; font-weight: 600; cursor: pointer; transition: all 0.2s ease-in-out; border: none; }
        .btn-sm { padding: 0.5rem 1rem; font-size: 0.875rem; }
        .btn-primary { background-color: #4f46e5; color: white; } .btn-primary:hover { background-color: #4338ca; }
        .btn-secondary { background-color: #e5e7eb; color: #374151; } .btn-secondary:hover { background-color: #d1d5db; }
        .btn-danger { background-color: #ef4444; color: white; } .btn-danger:hover { background-color: #dc2626; }
        .btn-success { background-color: #22c55e; color: white; } .btn-success:hover { background-color: #16a34a; }
        
        /* Graph Styles */
        .graph-container { border: 1px solid #d1d5db; border-radius: 0.5rem; background-color: #f9fafb; }
        .graph-container.add-mode { cursor: crosshair; }
        .graph-container.delete-mode, .graph-container.delete-mode g { cursor: not-allowed; }
        .links line { stroke: #999; stroke-opacity: 0.6; transition: stroke-width 0.3s; }
        .nodes g:hover > circle { stroke: #fbbf24; stroke-width: 3px; }
        .nodes circle { stroke: #fff; stroke-width: 1.5px; cursor: pointer; }
        .nodes circle.selected { stroke: #fbbf24; stroke-width: 4px; }
        .node-label { font-size: 12px; pointer-events: none; text-anchor: middle; fill: white; }
        .link-label { font-size: 12px; fill: #4b5563; font-weight: bold; cursor: pointer; }
        .volume-label { font-size: 11px; fill: #c2410c; font-weight: bold; pointer-events: none; }
        .calculation-table th, .od-table th { font-size: 0.8rem; padding: 0.5rem; }
        .calculation-table td, .od-table td { font-size: 0.8rem; padding: 0.5rem; font-family: monospace; }
        .od-table input { width: 60px; text-align: center; }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-7xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-800">The 4-Step Transportation Planning Model</h1>
            <p class="text-lg text-gray-600 mt-2">Part D: Trip Assignment (Shortest Path)</p>
        </header>

        <!-- Navigation -->
        <nav class="bg-white rounded-lg shadow-sm mb-8 p-2 flex justify-center">
             <a href="index.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part A: Trip Generation</a>
             <a href="partB.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part B: Trip Distribution</a>
             <a href="partC.html" class="px-4 py-2 text-gray-600 hover:text-indigo-600 font-semibold">Part C: Mode Choice</a>
             <a href="#" class="px-4 py-2 text-indigo-600 font-bold border-b-2 border-indigo-600">Part D: Trip Assignment</a>
        </nav>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div class="lg:col-span-1">
                <div class="card">
                    <h2>Controls & Instructions</h2>
                    <ul class="list-disc list-inside space-y-2 text-gray-600">
                        <li><strong>Add/Delete:</strong> Activate a mode, then click an item or the canvas.</li>
                        <li><strong>Edit Name/Time:</strong> Double-click a node or link label.</li>
                        <li><strong>Add Edge:</strong> Click one node (it turns yellow), then another.</li>
                    </ul>
                    <div class="grid grid-cols-2 gap-3 mt-6">
                        <button id="addNodeBtn" class="btn btn-secondary">Add Node</button>
                        <button id="deleteBtn" class="btn btn-secondary">Delete Mode</button>
                        <button id="randomizeNetBtn" class="btn btn-secondary col-span-2">Randomize Network</button>
                        <button id="clearBtn" class="btn btn-danger col-span-2">Clear All</button>
                        <button id="calculateBtn" class="btn btn-primary col-span-2">1. Calculate Shortest Paths</button>
                    </div>
                </div>
                <div id="od-card" class="card" style="display: none;">
                    <div class="flex justify-between items-center">
                        <h2>O-D Matrix</h2>
                        <button id="randomizeODBtn" class="btn btn-secondary btn-sm">Randomize</button>
                    </div>
                    <div id="od-matrix-container" class="overflow-x-auto"></div>
                    <button id="assignBtn" class="btn btn-primary w-full mt-4" disabled>2. Calculate Trip Assignment</button>
                </div>
            </div>

            <div class="lg:col-span-2">
                <div class="card">
                    <h2>Network Graph</h2>
                    <div id="graph-container" class="graph-container w-full aspect-video"></div>
                </div>
                <div id="results-card" class="card" style="display: none;">
                    <h2>Shortest Path Results</h2>
                    <div id="results-table-container" class="overflow-x-auto"></div>
                    <div id="dijkstra-steps-container" class="mt-6"></div>
                </div>
                <div id="assignment-results-card" class="card" style="display: none;">
                    <h2>All-or-Nothing Assignment Results</h2>
                     <div class="grid grid-cols-1 xl:grid-cols-2 gap-6">
                        <div id="assignment-table-container" class="overflow-x-auto"></div>
                        <div>
                             <h3 class="text-center font-semibold mb-2">Assigned Volume Graph</h3>
                             <div id="assignment-graph-container" class="graph-container w-full aspect-video"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    let nodes = [], links = [], selectedNode = null, nextNodeId = 0;
    let addNodeMode = false, deleteMode = false;
    let shortestPaths = new Map();

    const graphContainer = document.getElementById('graph-container');
    const width = graphContainer.clientWidth, height = width * 9 / 16;
    const addNodeBtn = document.getElementById('addNodeBtn'), deleteBtn = document.getElementById('deleteBtn');

    const svg = d3.select("#graph-container").append("svg").attr("width", width).attr("height", height)
        .on("click", (event) => {
            if (addNodeMode && event.target.tagName === 'svg') createNodeAtPoint(d3.pointer(event));
            else if (!addNodeMode && !deleteMode && event.target.tagName === 'svg' && selectedNode) deselectNodes();
        });

    const simulation = d3.forceSimulation(nodes)
        .force("link", d3.forceLink(links).id(d => d.id).distance(120))
        .force("charge", d3.forceManyBody().strength(-400))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .on("tick", ticked);

    let linkGroup = svg.append("g").attr("class", "links");
    let linkLabelGroup = svg.append("g").attr("class", "link-labels");
    let nodeGroup = svg.append("g").attr("class", "nodes");
    
    function update() {
        const node = nodeGroup.selectAll("g").data(nodes, d => d.id);
        node.exit().remove();
        const nodeEnter = node.enter().append("g")
            .on("click", nodeClicked).on("dblclick", editNodeName)
            .call(d3.drag().on("start", dragstarted).on("drag", dragged).on("end", dragended));
        nodeEnter.append("circle").attr("r", 20).attr("fill", d => d3.schemeCategory10[d.id % 10]);
        nodeEnter.append("text").attr("class", "node-label").attr("dy", ".35em").text(d => d.name);
        
        const link = linkGroup.selectAll("line").data(links, d => `${d.source.id}-${d.target.id}`);
        link.exit().remove();
        link.enter().insert("line", "g").on("click", linkClicked);

        const linkLabel = linkLabelGroup.selectAll("text").data(links, d => `${d.source.id}-${d.target.id}`);
        linkLabel.exit().remove();
        linkLabel.enter().append("text")
            .attr("class", "link-label").attr("text-anchor", "middle").attr("dy", -5)
            .text(d => d.time).on("dblclick", editLinkTime).on("click", linkClicked);

        simulation.nodes(nodes);
        simulation.force("link").links(links);
        simulation.alpha(1).restart();
        renderODMatrix();
    }

    function ticked() {
        linkGroup.selectAll("line").attr("x1", d => d.source.x).attr("y1", d => d.source.y).attr("x2", d => d.target.x).attr("y2", d => d.target.y);
        nodeGroup.selectAll("g").attr("transform", d => `translate(${d.x},${d.y})`);
        linkLabelGroup.selectAll("text").attr("x", d => (d.source.x + d.target.x) / 2).attr("y", d => (d.source.y + d.target.y) / 2);
    }
    
    function toggleMode(mode) {
        if (mode === 'add') {
            addNodeMode = !addNodeMode;
            if (deleteMode) toggleMode('delete');
        } else if (mode === 'delete') {
            deleteMode = !deleteMode;
            if (addNodeMode) toggleMode('add');
        }
        addNodeBtn.textContent = addNodeMode ? "Click canvas to place" : "Add Node";
        addNodeBtn.classList.toggle('btn-success', addNodeMode);
        addNodeBtn.classList.toggle('btn-secondary', !addNodeMode);
        graphContainer.classList.toggle('add-mode', addNodeMode);
        deleteBtn.textContent = deleteMode ? "Click item to delete" : "Delete Mode";
        deleteBtn.classList.toggle('btn-danger', deleteMode);
        deleteBtn.classList.toggle('btn-secondary', !deleteMode);
        graphContainer.classList.toggle('delete-mode', deleteMode);
        if (addNodeMode || deleteMode) deselectNodes();
    }

    function createNodeAtPoint([x, y]) {
        const name = String.fromCharCode(65 + (nextNodeId % 26));
        nodes.push({ id: nextNodeId++, name: name, x, y, fx: x, fy: y });
        update();
        toggleMode('add');
    }

    function removeNode(event, d) {
        event.preventDefault();
        nodes = nodes.filter(n => n.id !== d.id);
        links = links.filter(l => l.source.id !== d.id && l.target.id !== d.id);
        if (selectedNode === d) deselectNodes();
        update();
    }
    function removeLink(event, d) { event.preventDefault(); links = links.filter(l => l !== d); update(); }
    
    function editNodeName(event, d) { event.stopPropagation(); const newName = prompt("New name:", d.name); if(newName) { d.name = newName; nodeGroup.selectAll("g").select("text").text(n=>n.name); renderODMatrix();} }
    function editLinkTime(event, d) { event.stopPropagation(); const newTime = prompt("New time:", d.time); if(newTime && !isNaN(newTime)) { d.time = +newTime; linkLabelGroup.selectAll("text").text(l=>l.time); } }

    function nodeClicked(event, d) {
        event.stopPropagation();
        if (addNodeMode) return;
        if (deleteMode) { removeNode(event, d); return; }
        if (!selectedNode) {
            selectedNode = d;
            d3.select(event.currentTarget).select('circle').classed('selected', true);
        } else {
            if (selectedNode.id !== d.id && !linkExists(selectedNode, d)) {
                const time = prompt(`Travel time from ${selectedNode.name} to ${d.name}:`);
                if (time && !isNaN(time)) { links.push({ source: selectedNode, target: d, time: +time }); update(); }
            }
            deselectNodes();
        }
    }
    
    function linkClicked(event, d) { event.stopPropagation(); if(deleteMode) removeLink(event, d); }
    function deselectNodes() { selectedNode = null; nodeGroup.selectAll("circle").classed("selected", false); }
    function linkExists(n1, n2) { return links.some(l => (l.source.id === n1.id && l.target.id === n2.id) || (l.source.id === n2.id && l.target.id === n1.id)); }

    function dragstarted(event, d) { if (!event.active) simulation.alphaTarget(0.3).restart(); d.fx = d.x; d.fy = d.y; }
    function dragged(event, d) { d.fx = event.x; d.fy = event.y; }
    function dragended(event, d) { if (!event.active) simulation.alphaTarget(0); if (!addNodeMode) { d.fx = null; d.fy = null; }}

    function clearAll() {
        nodes = []; links = []; nextNodeId = 0; selectedNode = null;
        if (addNodeMode) toggleMode('add'); if (deleteMode) toggleMode('delete');
        document.getElementById('results-card').style.display = 'none';
        document.getElementById('od-card').style.display = 'none';
        document.getElementById('assignment-results-card').style.display = 'none';
        update();
    }
    
    function renderODMatrix() {
        const card = document.getElementById('od-card');
        if (nodes.length < 2) { card.style.display = 'none'; return; }
        let table = `<table class="w-full text-sm od-table"><thead><tr><th>O \\ D</th>${nodes.map(n=>`<th>${n.name}</th>`).join('')}</tr></thead><tbody>`;
        nodes.forEach(origin => {
            table += `<tr><td>${origin.name}</td>`;
            nodes.forEach(dest => {
                if (origin.id === dest.id) table += `<td>-</td>`;
                else table += `<td><input type="number" class="od-input" data-origin="${origin.id}" data-dest="${dest.id}"></td>`;
            });
            table += `</tr>`;
        });
        document.getElementById('od-matrix-container').innerHTML = table + `</tbody></table>`;
        card.style.display = 'block';
    }

    function randomizeOD() {
        document.querySelectorAll('.od-input').forEach(input => {
            input.value = Math.floor(Math.random() * 451) + 50; // Random number between 50 and 500
        });
    }

    function randomizeNetwork() {
        const numNodes = parseInt(prompt("Enter number of nodes for the random network:", "5"));
        if (!numNodes || numNodes < 2) return;
        clearAll();
        for (let i = 0; i < numNodes; i++) {
            nodes.push({ id: nextNodeId++, name: String.fromCharCode(65 + i), x: Math.random() * width, y: Math.random() * height });
        }
        for (let i = 1; i < numNodes; i++) { // Create a spanning tree to ensure connectivity
            const target = Math.floor(Math.random() * i);
            links.push({ source: nodes[i], target: nodes[target], time: Math.floor(Math.random() * 20) + 5 });
        }
        const extraEdges = Math.floor(numNodes / 2); // Add some extra edges for cycles
        for (let i = 0; i < extraEdges; i++) {
            const n1 = nodes[Math.floor(Math.random() * numNodes)];
            const n2 = nodes[Math.floor(Math.random() * numNodes)];
            if (n1.id !== n2.id && !linkExists(n1, n2)) {
                links.push({ source: n1, target: n2, time: Math.floor(Math.random() * 20) + 5 });
            }
        }
        update();
    }

    function calculateShortestPaths() {
        if (nodes.length < 2) return alert("Please add at least two nodes.");
        const resultsBody = document.getElementById('results-table-container');
        const dijkstraContainer = document.getElementById('dijkstra-steps-container');
        resultsBody.innerHTML = ''; dijkstraContainer.innerHTML = '';
        shortestPaths.clear();
        let resultsTable = `<table class="w-full text-sm"><thead><tr><th class="text-left">Origin</th><th class="text-left">Destination</th><th>Total Time</th><th class="text-left">Path</th></tr></thead><tbody>`;

        nodes.forEach(startNode => {
            const { dist, prev, steps } = runDijkstra(startNode);
            displayDijkstraSteps(startNode, steps);
            nodes.forEach(endNode => {
                if (startNode.id === endNode.id) return;
                const distance = dist.get(endNode.id);
                let path = [];
                if (distance !== Infinity) {
                    let current = endNode;
                    while (current) { path.unshift(current); current = prev.get(current.id); }
                }
                shortestPaths.set(`${startNode.id}-${endNode.id}`, path);
                resultsTable += `<tr><td class="text-left">${startNode.name}</td><td class="text-left">${endNode.name}</td><td>${distance === Infinity ? 'N/A' : distance}</td><td class="text-left">${distance === Infinity ? 'No path' : path.map(p=>p.name).join(' â†’ ')}</td></tr>`;
            });
        });
        resultsBody.innerHTML = resultsTable + `</tbody></table>`;
        document.getElementById('results-card').style.display = 'block';
        document.getElementById('assignBtn').disabled = false;
    }
    
    function calculateTripAssignment() {
        const linkVolumes = new Map();
        links.forEach(l => {
            const key = l.source.id < l.target.id ? `${l.source.id}-${l.target.id}` : `${l.target.id}-${l.source.id}`;
            linkVolumes.set(key, {link: l, total: 0, components: []});
        });
        
        document.querySelectorAll('.od-input').forEach(input => {
            const trips = parseFloat(input.value) || 0;
            if (trips > 0) {
                const path = shortestPaths.get(`${input.dataset.origin}-${input.dataset.dest}`);
                if (path && path.length > 1) {
                    for (let i=0; i < path.length - 1; i++) {
                        const u = path[i].id, v = path[i+1].id;
                        const key = u < v ? `${u}-${v}` : `${v}-${u}`;
                        if (linkVolumes.has(key)) {
                            linkVolumes.get(key).total += trips;
                            linkVolumes.get(key).components.push({from: path[0].name, to: path[path.length-1].name, trips});
                        }
                    }
                }
            }
        });
        
        displayAssignmentResults(linkVolumes);
        displayAssignmentGraph(linkVolumes);
    }
    
    function displayAssignmentGraph(linkVolumes) {
        const container = document.getElementById('assignment-graph-container');
        container.innerHTML = '';
        const assignmentSvg = d3.select(container).append("svg").attr("width", width).attr("height", height);
        const color = d3.scaleSequential(d3.interpolateReds).domain([0, d3.max(Array.from(linkVolumes.values()), d => d.total) || 1]);
        
        const assignmentSim = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id).distance(120))
            .force("charge", d3.forceManyBody().strength(-400))
            .force("center", d3.forceCenter(width / 2, height / 2));
        
        const maxVolume = d3.max(Array.from(linkVolumes.values()), d => d.total) || 1;
        const widthScale = d3.scaleLinear().domain([0, maxVolume]).range([1, 15]);

        assignmentSim.on("tick", () => {
            assignmentSvg.selectAll(".link").attr("x1", d=>d.source.x).attr("y1", d=>d.source.y).attr("x2", d=>d.target.x).attr("y2", d=>d.target.y);
            assignmentSvg.selectAll(".node").attr("transform", d => `translate(${d.x},${d.y})`);
            assignmentSvg.selectAll(".vol-label").attr("x", d=>(d.source.x+d.target.x)/2).attr("y", d=>(d.source.y+d.target.y)/2);
        });
        
        assignmentSvg.append("g").selectAll("line").data(links).enter().append("line").attr("class", "link")
            .style("stroke-width", d => {
                const key = d.source.id < d.target.id ? `${d.source.id}-${d.target.id}` : `${d.target.id}-${d.source.id}`;
                return widthScale(linkVolumes.get(key)?.total || 0) + 'px';
            })
            .style("stroke", "#555");
        
        const nodeEnter = assignmentSvg.append("g").selectAll("g").data(nodes).enter().append("g").attr("class", "node");
        nodeEnter.append("circle").attr("r", 20).attr("fill", d => d3.schemeCategory10[d.id % 10]);
        nodeEnter.append("text").attr("class", "node-label").attr("dy", ".35em").text(d => d.name);
        
        assignmentSvg.append("g").selectAll("text").data(links).enter().append("text").attr("class", "vol-label")
            .attr("dy", -5).attr("text-anchor", "middle").text(d => {
                const key = d.source.id < d.target.id ? `${d.source.id}-${d.target.id}` : `${d.target.id}-${d.source.id}`;
                return linkVolumes.get(key)?.total || 0;
            });
    }

    function displayAssignmentResults(linkVolumes) {
        // Implementation from previous turn
        const container = document.getElementById('assignment-table-container');
        let html = `<table class="w-full text-sm calculation-table"><thead><tr><th class="text-left">Link</th><th class="text-left">Calculation</th><th>Total Volume</th></tr></thead><tbody>`;
        for (const [key, data] of linkVolumes.entries()) {
            if (data.total > 0) {
                const calcString = data.components.map(c => `${c.trips} <sub>(${c.from}-${c.to})</sub>`).join(' + ');
                html += `<tr><td class="text-left">${data.link.source.name} â†” ${data.link.target.name}</td><td class="text-left">${calcString}</td><td>${data.total}</td></tr>`;
            }
        }
        container.innerHTML = html + `</tbody></table>`;
        document.getElementById('assignment-results-card').style.display = 'block';
    }

    function runDijkstra(startNode) {
        // Implementation from previous turn
        const dist = new Map(), prev = new Map(), pq = new Set(nodes.map(n => n.id)), nodeMap = new Map(nodes.map(n => [n.id, n])), steps = [];
        let stepCount = 0;
        nodes.forEach(node => { dist.set(node.id, Infinity); prev.set(node.id, null); });
        dist.set(startNode.id, 0);
        while (pq.size > 0) {
            let u_id = null, min_dist = Infinity;
            for (const nodeId of pq) { if (dist.get(nodeId) < min_dist) { min_dist = dist.get(nodeId); u_id = nodeId; } }
            if (u_id === null || min_dist === Infinity) break;
            const u = nodeMap.get(u_id); pq.delete(u_id);
            steps.push({ step: ++stepCount, visited: u.name, distances: new Map(dist) });
            const neighbors = links.filter(l => l.source.id === u.id || l.target.id === u.id).map(l => l.source.id === u.id ? l.target : l.source);
            for (const v of neighbors) {
                const link = links.find(l => (l.source.id === u.id && l.target.id === v.id) || (l.source.id === v.id && l.target.id === u.id));
                const alt = dist.get(u.id) + link.time;
                if (alt < dist.get(v.id)) { dist.set(v.id, alt); prev.set(v.id, u); }
            }
        }
        return { dist, prev, steps };
    }

    function displayDijkstraSteps(startNode, steps) {
        // Implementation from previous turn
        const container = document.getElementById('dijkstra-steps-container');
        let html = `<h3 class="text-lg font-semibold mt-8 border-t pt-4">Dijkstra's Calculation from Origin: ${startNode.name}</h3>`;
        html += `<table class="w-full text-sm mt-2 calculation-table"><thead><tr><th>Step</th><th>Visiting</th>`;
        nodes.forEach(n => html += `<th>Dist(${n.name})</th>`);
        html += `</tr></thead><tbody>`;
        steps.forEach(step => {
            html += `<tr><td>${step.step}</td><td>${step.visited}</td>`;
            nodes.forEach(n => { const d = step.distances.get(n.id); html += `<td>${d === Infinity ? 'âˆž' : d}</td>`; });
            html += `</tr>`;
        });
        container.innerHTML += html + `</tbody></table>`;
    }
    
    document.getElementById('addNodeBtn').addEventListener('click', () => toggleMode('add'));
    document.getElementById('deleteBtn').addEventListener('click', () => toggleMode('delete'));
    document.getElementById('clearBtn').addEventListener('click', clearAll);
    document.getElementById('randomizeNetBtn').addEventListener('click', randomizeNetwork);
    document.getElementById('randomizeODBtn').addEventListener('click', randomizeOD);
    document.getElementById('calculateBtn').addEventListener('click', calculateShortestPaths);
    document.getElementById('assignBtn').addEventListener('click', calculateTripAssignment);

    // Initial state
    nodes.push({id: nextNodeId++, name: 'A', x: width/4, y: height/2});
    nodes.push({id: nextNodeId++, name: 'B', x: width/2, y: height/2});
    nodes.push({id: nextNodeId++, name: 'C', x: 3*width/4, y: height/2});
    links.push({ source: nodes[0], target: nodes[1], time: 10 });
    links.push({ source: nodes[1], target: nodes[2], time: 12 });
    update();
});
</script>

</body>
</html>
</file>

</files>
